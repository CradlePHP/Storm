<?php 

namespace Cradle\Storm;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Cradle_Storm_QuerySelect_Test extends TestCase
{
    /**
     * @var QuerySelect
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new QuerySelect;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Storm\QuerySelect::from
     */
    public function testFrom()
    {
        $instance = $this->object->from('foobar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::getQuery
     */
    public function testGetQuery()
    {
        $actual = $this->object->getQuery();
		$this->assertEquals('SELECT * FROM    ;', $actual);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::groupBy
     */
    public function testGroupBy()
    {
        $instance = $this->object->groupBy('foobar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::having
     */
    public function testHaving()
    {
        $instance = $this->object->having('foobar');
        $this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::innerJoin
     */
    public function testInnerJoin()
    {
        $instance = $this->object->innerJoin('foobar', 'foo=bar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::join
     */
    public function testJoin()
    {
        $instance = $this->object->join('INNER', 'foobar', 'foo=bar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::leftJoin
     */
    public function testLeftJoin()
    {
        $instance = $this->object->leftJoin('foobar', 'foo=bar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::limit
     */
    public function testLimit()
    {
        $instance = $this->object->limit(0, 1);
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::outerJoin
     */
    public function testOuterJoin()
    {
        $instance = $this->object->outerJoin('foobar', 'foo=bar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::rightJoin
     */
    public function testRightJoin()
    {
        $instance = $this->object->rightJoin('foobar', 'foo=bar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::select
     */
    public function testSelect()
    {
        $instance = $this->object->select('foobar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::sortBy
     */
    public function testSortBy()
    {
        $instance = $this->object->sortBy('foobar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }

    /**
     * @covers Cradle\Storm\QuerySelect::where
     */
    public function testWhere()
    {
        $instance = $this->object->where('foo=bar');
		$this->assertInstanceOf('Cradle\Storm\QuerySelect', $instance);
    }
}
